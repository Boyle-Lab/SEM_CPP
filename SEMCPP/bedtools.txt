bedtools will be used for the intersect function which will be comparing the 
	read and mergefile to identify .
	
	e.g. - "./bin/bedtools intersect -a $readfile -b $mergefile -wa -u | sort | uniq > $bedfile"
	
The -a option used in declaring the first bed file to be compared just as -b
	denotes that there will be a second file to compare with.

-wa will tell bedtools to write the original entry in the readfile for each 
	overlap.
	
The -u option tells bedtools to only write the original in A once for each 
	found overlap.
	
Identifies chromosones based upon chromosone name and final position, so if the 
	first and third elements of a line match it will print the specific chromosone 
	data.
	
Bed format has at a minimum three fields of chromosone name, starting position, 
	and end position but can have nine additional fields.
	
Prints out unique chromosones which in our case would have to save them as part 
	of the struct but also be numerically/alphabetically sorted and checks again 
	repeats of lines.(Vector of strings most likely)
	
Actual sorting algorithm found in the intersectfile.cpp and the initialization of
	flags can be found in ContextIntersect.cpp file.
	
Change the arguments to variables or possibly a struct dedicated to running bedtools
	that are passed to the function bedtools (going to change bedtools into a 
	function format.

Must bypass FileRecordTypeChecker since it will be passed as a struct and for the function 
	to be used it must be a valid struct.

Will need to apply the same methods of isBedFormat in FileRecordTypeChecker to verify the 
	formatting is valid for Bed format. (line 253)

Will need to check the number of fields in the bed file to denote which method to use 
	(i.e. passesBed5 line 443 FileRecordTypeChecker)

Will bypass FileRecordManager checks unless a step to check for the struct is implemented 
	or if file is otherwise manipulated.

Files dealt with as a class in bedtools the class is Bed + (number of elements in bedfile) + 
	Interval.

The class described extends Bed3Interval which extends Record. In turn these are the files which
	disect the input bed file.

The disection of the files occurs in the SingleLineDelimTextFileReader and utilizes the get 
	field function. (e.g. in Bed#Interval.cpp line 26)

File Record Manager calls on the function to initialize and therefore get the values from the file.

The values seem to be stored in a class called Quickstring which also contains a function 
	for assigning values or more so pointers to be used to reference the values for each distinct 
	column element.

	-Quickstring has a private pointer called buffer
	-Buffer is a pointer which can be used as an array to access the variables in memory
	 through defference as well as be resized similar to a vector when additional fields 
	 are found or implemented such as when the initialization of elements in the bed formatting
	 are entered and additional fields are added due to the new traits of the inherited class.
	-In appending buffer the memcpy function of string is used and in this case is fed the destination
	 of buffer + an offset amount called currSize, the input values, as well as the input length of 
	 the data

*Learn more about pointers in order to fully understand how the value is being stored.

*What is sline and why is it being added to the start pos
	-sLine seems to be used in data retrieval from the files where it is a variable used to 
	 hold full lines when disecting the input file
	-Appears to be there to append the elements to _buffer with a length of endpos-startpos

Program path:
	bedtools.cpp ->  bedtoolsdriver.cpp -> gets context -> contextIntersect.cpp-> bedtoolsdriver.cpp ->
	-> gets tool -> tool directs to context file -> initialize IntersectFile.cpp -> bedtoolsdriver.cpp ->
	-> initialize RecordOutputManager.cpp -> IntersectFile.cpp findNext of hits -> processHits -> 
	-> cleanupHits -> finalizeCalculations -> giveFinalReport? -> bedtools.cpp -> return 0

*Investigate hits and RecordKeyVector

*Future tasks look into the output of bedtools and change to adding it to the struct in a type of vector